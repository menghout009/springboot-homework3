pipeline {
    agent any
    tools {
        jdk 'jdk17'
        maven 'mvn' // if you’ve configured Maven too
    }
    environment {
        SONARQUBE_URL = "http://34.87.145.53:9000" // your host
        PROJECT_KEY = "com.example%3ASPRING_HOMEWORK003" // your SonarQube project name
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '5')) // Keep only the last 5 builds
       // timestamps() // Add timestamps to logs
    }

    stages {
        stage('Clean Workspace') {
            steps {
                echo "Cleaning workspace before starting the pipeline..."
                cleanWs() // Clear workspace
                echo "Re-cloning repository..."
                checkout scm // Explicitly clone the repository again
            }
        }
stage('Build with JDK 17') {
  steps {
    sh '''
      echo "🔧 Setting JAVA_HOME to JDK 17..."
      export JAVA_HOME=/usr/lib/jvm/openjdk-17
      export PATH=$JAVA_HOME/bin:$PATH

      echo "✅ JAVA_HOME is set to: $JAVA_HOME"
      java -version

      echo "🔍 Checking Maven wrapper version..."
      ./mvnw --version

      echo "🛠️ Building the project..."
      ./mvnw clean install

      echo "🧪 Running tests..."
      ./mvnw test
    '''
  }
}

        stage('SonarQube Scan') {
            steps {
                echo "Starting SonarQube scan..."
                withSonarQubeEnv('SonarQube') { // Use the configured SonarQube environment 'SonarQube'
                    sh './mvnw sonar:sonar -Dsonar.java.binaries=target/classes' // Scan after build
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    echo "Waiting for SonarQube quality gate results..."
                    timeout(time: 30, unit: 'MINUTES') { // Set a timeout of 30 minutes
                        def qualityGate = waitForQualityGate() // Wait for the quality gate results
                        if (qualityGate.status != 'OK') {
                            error "Pipeline failed due to quality gate failure: ${qualityGate.status}"
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo "✅ Pipeline completed successfully."
            echo "🔗 For detail >> ${SONARQUBE_URL}/dashboard?id=${PROJECT_KEY}"
        }
        failure {
            echo "❌ Pipeline failed. Check logs for details. >> ${SONARQUBE_URL}/dashboard?id=${PROJECT_KEY}"
        }
        always {
            echo "Pipeline execution finished."
        }
    }
}
