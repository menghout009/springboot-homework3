pipeline {
    agent { label 'linux' }

    options {
        buildDiscarder(logRotator(numToKeepStr: '5')) // Keep only the last 5 builds
        timestamps() // Add timestamps to logs
    }

    stages {
        stage('Preparation') {
            steps {
                echo "Starting the pipeline for ${env.JOB_NAME}"
                sh './mvnw --version' // Check Maven version
            }
        }

        stage('Build and Test') {
            steps {
                echo "Building and testing the project..."
                sh './mvnw clean test' // Build and run tests
            }
        }

        stage('SonarQube Scan') {
            steps {
                echo "Starting SonarQube scan..."
                withSonarQubeEnv('sq1') { // Use the configured SonarQube environment 'sq1'
                    sh './mvnw clean org.sonarsource.scanner.maven:sonar-maven-plugin:3.9.0.2155:sonar'
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    echo "Waiting for SonarQube quality gate results..."
                    def qualityGate = waitForQualityGate() // Wait for the Quality Gate
                    if (qualityGate.status != 'OK') {
                        error "Pipeline failed due to quality gate failure: ${qualityGate.status}"
                    }
                }
            }
        }
    }

    post {
        success {
            echo "✅ Pipeline completed successfully for ${env.JOB_NAME}."
        }
        failure {
            echo "❌ Pipeline failed. Check logs for details."
        }
        always {
            echo "Pipeline execution finished."
        }
    }
}
